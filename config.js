export const createFiles = (namee, port, store) => {
  const addstoredep = () => {
    if (store == "Zustand") {
      return `,
  "zustand":"^3.7.1"`;
    }

    if (store == "Zustand-p") {
      return `,
  "zustand":"^3.7.1",
  "zustand-persist":"^0.4.0"`;
    }
    return "";
  };

  const objs = [
    {
      name: `./${namee}/src/index.js`,
      text: `import("./App");`,
    },
    {
      name: `./${namee}/package.json`,
      text: `
{
"name": "${namee}",
"version": "1.0.0",
"scripts": {
  "build": "webpack --mode production",
  "build:dev": "webpack --mode development",
  "build:start": "cd dist && PORT=${port} npx serve",
  "start": "webpack serve --open --mode development",
  "start:live": "webpack serve --open --mode development --live-reload --hot"
},
"license": "MIT",
"author": {
  "name": "Jack Herrington",
  "email": "jherr@pobox.com"
},
"devDependencies": {
  "@babel/core": "^7.15.8",
  "@babel/plugin-transform-runtime": "^7.15.8",
  "@babel/preset-env": "^7.15.8",
  "@babel/preset-react": "^7.14.5",
  "autoprefixer": "^10.1.0",
  "babel-loader": "^8.2.2",
  "css-loader": "^6.3.0",
  "html-webpack-plugin": "^5.3.2",
  "postcss": "^8.2.1",
  "postcss-loader": "^4.1.0",
  "style-loader": "^3.3.0",
  "webpack": "^5.57.1",
  "webpack-cli": "^4.9.0",
  "webpack-dev-server": "^4.3.1"
},
"dependencies": {
  "@babel/runtime": "^7.13.10",
  "react": "^17.0.2",
  "react-dom": "^17.0.2"
  ${addstoredep()}
}
}
`,
    },
    {
      name: `./${namee}/src/App.jsx`,
      text: `import React from "react";
import ReactDOM from "react-dom";

import "./index.css";

export const App = () =>{

return (
<div className="container">
<div>Name: md</div>
<div>Framework: react</div>
<div>Language: JavaScript</div>
<div>CSS: Empty CSS</div>
</div>
);

}
ReactDOM.render(<App />, document.getElementById("app"));
`,
    },

    {
      name: `./${namee}/src/index.css`,
      text: `body {
font-family: Arial, Helvetica, sans-serif;
}

.container {
font-size: 3rem;
margin: auto;
max-width: 800px;
margin-top: 20px;
}`,
    },

    {
      name: `./${namee}/src/index.html`,
      text: `<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>md</title>
</head>

<body>
<div id="app"></div>
</body>

</html>
`,
    },

    {
      name: `./${namee}/webpack.config.js`,
      text: `const HtmlWebPackPlugin = require("html-webpack-plugin");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");

const deps = require("./package.json").dependencies;
module.exports = {
output: {
publicPath: "http://localhost:${port}/",
},

resolve: {
extensions: [".tsx", ".ts", ".jsx", ".js", ".json"],
},

devServer: {
port: ${port},
historyApiFallback: true,
},

module: {
rules: [
  {
    test: /\.m?js/,
    type: "javascript/auto",
    resolve: {
      fullySpecified: false,
    },
  },
  {
    test: /\.(css|s[ac]ss)$/i,
    use: ["style-loader", "css-loader", "postcss-loader"],
  },
  {
    test: /\.(ts|tsx|js|jsx)$/,
    exclude: /node_modules/,
    use: {
      loader: "babel-loader",
    },
  },
],
},

plugins: [
new ModuleFederationPlugin({
  name: '${namee}',
  filename: "remoteEntry.js",
  remotes: {},
  exposes: {
    './${namee}App':'./src/App'
  },
  shared: {
    ...deps,
    react: {
      singleton: true,
      requiredVersion: deps.react,
    },
    "react-dom": {
      singleton: true,
      requiredVersion: deps["react-dom"],
    },
  },
}),
new HtmlWebPackPlugin({
  template: "./src/index.html",
}),
],
};
`,
    },

    {
      name: `./${namee}/.babelrc`,
      text: `{
"presets": ["@babel/preset-react", "@babel/preset-env"],
"plugins": [
   ["@babel/transform-runtime"]
]
}
`,
    },
    {
      name: `./${namee}/.gitignore`,
      text: `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
`,
    },
  ];

  if (store == "Zustand") {
    objs.push({
      name: `./${namee}/src/infra/store/store.js`,
      text: `import create from 'zustand';


      export const useStore = create( (set)=>(
      {
          count : 0,
          increment: ()=> set( ( state )=> ( { count : state.count +1  }) ),
      }
      ) )
      
      
      `,
    });
  }

  if (store == "Zustand-p") {
    objs.push({
      name: `./${namee}/src/store/store.js`,
      text: `import createStore from 'zustand'
      import persist from './persist'
      
      export const useStore = createStore( 
      
          persist(
              {
                  key:"todos",
                  denylist: ['Loading','errorMessage' ],
              },
              (set) => ({
                  isLoading: false,
                  errorMessage: '',
                  count : 0 ,
                  increment : ()=> set( (state )=> ( { count : state.count + 1  })  ),
                  clear : ()=> set ( (state)=>( { count: 0  } ) ), 
      
              })
          )
      
       );
      `,
    });

    objs.push({
      name: `./${namee}/src/store/persist.js`,
      text: `import { configurePersist } from 'zustand-persist'


      const { persist, purge } = configurePersist({
        storage: localStorage
      })
      
      export default persist
      export { purge }
      
      `,
    });
  }

  return objs;
};
